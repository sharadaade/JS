JavaScript Functions ‚Äî Complete Beginner Notes
=====================================================

üí° What are Functions?
-----------------------
A function is a reusable block of code designed to perform a specific task.
Functions help us avoid repeating code, make programs cleaner, and easier to debug.

Example:
---------
function greet() {
  console.log("Hello Sharad!");
}
greet(); // Output: Hello Sharad!

Benefits:
---------
- Reusability
- Cleaner and organized code
- Easier debugging

-----------------------------------------------------
üßæ Function Declaration
-----------------------------------------------------
A function declaration uses the `function` keyword followed by a name, parameters, and code block.

Example:
---------
function add(a, b) {
  return a + b;
}

console.log(add(5, 10)); // Output: 15

Notes:
------
- Has a name (`add`)
- Can be called anywhere (because of hoisting)

-----------------------------------------------------
‚öôÔ∏è Parameters vs Arguments
-----------------------------------------------------
| Term | Description | Example |
|------|--------------|----------|
| Parameter | Placeholder variable in the function | a, b in function add(a, b) |
| Argument | Actual value passed when calling | 5, 10 in add(5,10) |

Example:
---------
function add(a, b) {
  return a + b;
}
add(5, 10); // 5 and 10 are arguments

-----------------------------------------------------
üîÅ Return Values
-----------------------------------------------------
The `return` keyword sends a value back to where the function was called.

Example:
---------
function multiply(x, y) {
  return x * y;
}

let result = multiply(4, 5);
console.log(result); // Output: 20

Notes:
------
- After `return`, no further code in the function executes.

-----------------------------------------------------
‚ö° Function Expressions
-----------------------------------------------------
A function expression is when a function is assigned to a variable.

Example:
---------
const sayHi = function() {
  console.log("Hi there!");
};

sayHi(); // Output: Hi there!

Notes:
------
- Can be anonymous (no name)
- Not hoisted (you can‚Äôt call it before defining it)

-----------------------------------------------------
üèπ Arrow Functions
-----------------------------------------------------
Introduced in ES6, arrow functions are a shorter way to write functions.

Example:
---------
Traditional:
function square(x) {
  return x * x;
}

Arrow:
const squareArrow = (x) => x * x;

console.log(squareArrow(5)); // Output: 25

Notes:
------
- No `function` keyword
- Implicit return if single line (no `{}` or `return`)
- Does not have its own `this`

-----------------------------------------------------
üß± Default Parameters
-----------------------------------------------------
You can set default values for parameters.

Example:
---------
function greet(name = "Guest") {
  console.log(`Hello, ${name}!`);
}

greet(); // Output: Hello, Guest!
greet("Sharad"); // Output: Hello, Sharad!

-----------------------------------------------------
üîÅ Rest Operator (...)
-----------------------------------------------------
The rest operator collects all remaining arguments into an array.

Example:
---------
function sum(...numbers) {
  console.log(numbers); // [1, 2, 3]
  return numbers.reduce((a, b) => a + b);
}

console.log(sum(1, 2, 3)); // Output: 6

-----------------------------------------------------
üåä Spread Operator (...)
-----------------------------------------------------
The spread operator expands an array or object into individual elements.

Example:
---------
const arr = [1, 2, 3];
console.log(...arr); // Output: 1 2 3

const numbers = [5, 10, 15];
const more = [...numbers, 20, 25];
console.log(more); // [5, 10, 15, 20, 25]

-----------------------------------------------------
üß© First-Class Functions
-----------------------------------------------------
In JavaScript, functions are first-class citizens, meaning they can:
1. Be stored in variables.
2. Be passed as arguments.
3. Be returned from other functions.

Example:
---------
function greet() {
  return "Hello!";
}

function callFunction(fn) {
  console.log(fn());
}

callFunction(greet); // Output: Hello!

-----------------------------------------------------
üß† Higher-Order Functions (HOF)
-----------------------------------------------------
A Higher-Order Function is a function that either:
1. Takes another function as an argument, or
2. Returns another function.

Example:
---------
function hofExample(func, value) {
  return func(value);
}

function double(num) {
  return num * 2;
}

console.log(hofExample(double, 5)); // Output: 10

Built-in HOF examples:
- map()
- filter()
- reduce()

-----------------------------------------------------
üß¨ Closures & Lexical Scope
-----------------------------------------------------
Lexical Scope:
----------------
Inner functions can access variables from their outer functions.

Example:
---------
function outer() {
  let name = "Sharad";

  function inner() {
    console.log(name);
  }

  inner();
}

outer(); // Output: Sharad

Closure:
---------
A closure occurs when an inner function remembers variables from its outer function,
even after the outer function has finished executing.

Example:
---------
function counter() {
  let count = 0;

  return function() {
    count++;
    console.log(count);
  };
}

const increment = counter();
increment(); // 1
increment(); // 2
increment(); // 3

Notes:
------
- The variable `count` is remembered due to closure.
- Useful for data privacy and encapsulation.

-----------------------------------------------------
‚ö° IIFE (Immediately Invoked Function Expression)
-----------------------------------------------------
An IIFE runs immediately after it is defined.

Example:
---------
(function() {
  console.log("This runs immediately!");
})();

Use cases:
-----------
- Avoids polluting the global scope.
- Runs setup code right away.

-----------------------------------------------------
üß© Hoisting: Declarations vs Expressions
-----------------------------------------------------
Hoisting means functions or variables are moved to the top of their scope before execution.

Example:
---------
sayHello(); // Works
function sayHello() {
  console.log("Hello!");
}

sayHi(); // ‚ùå Error
const sayHi = function() {
  console.log("Hi!");
};

Notes:
------
| Type | Hoisted? | Example |
|------|-----------|----------|
| Function Declaration | ‚úÖ Yes | function greet() {} |
| Function Expression | ‚ùå No | const greet = function() {}; |
| Arrow Function | ‚ùå No | const greet = () => {}; |

-----------------------------------------------------
üìù Summary Table
-----------------------------------------------------
| Concept | Description |
|----------|--------------|
| Function | Reusable code block |
| Declaration | Named, hoisted |
| Expression | Stored in variable, not hoisted |
| Arrow | Short syntax |
| Parameters/Arguments | Placeholder vs real values |
| Return | Sends value back |
| Default Param | Assigns default |
| Rest/Spread | ... collects or expands |
| First-Class | Functions treated as values |
| HOF | Takes/returns functions |
| Closure | Inner fn remembers outer vars |
| IIFE | Runs immediately |
| Hoisting | Only declarations hoisted |

-----------------------------------------------------
End of Notes ‚Äî JavaScript Functions for Beginners
=====================================================
