
# break and continue in if/if-else
####################################################################################
NOTE : break and continue only occur in for, while or do-while loop;
if try to use break and continue in if or if-else it shows syntax error

####################################################################################
There are 8 basic data types in JavaScript.
####################################################################################
    Seven primitive data types:
        number - for numbers of any kind: integer or floating-point, integers are limited by Â±(253-1).
        bigint -  for integer numbers of arbitrary length.
        string - for strings. A string may have zero or more characters, thereâ€™s no separate single-character type.
        boolean - for true/false.
        null - for unknown values â€“ a standalone type that has a single value null.
        undefined - for unassigned values â€“ a standalone type that has a single value undefined.
        symbol -  for unique identifiers.

      And one non-primitive data type:
        object - for more complex data structures.

    The typeof operator allows us to see which type is stored in a variable.
    Usually used as typeof x, but typeof(x) is also possible.
    Returns a string with the name of the type, like "string".
    For null returns "object" â€“ this is an error in the language, itâ€™s not actually an object.

###################################################################################
ðŸ§  Nullish Coalescing Operator (??) â€” Beginner Notes
###################################################################################
------------------------------------------------------------
What is it?
------------------------------------------------------------
The Nullish Coalescing Operator (??) is used to provide a 
default value when a variable is null or undefined.

Syntax:
    let result = value ?? defaultValue;

Meaning:
    If 'value' is null or undefined, use 'defaultValue'.
    Otherwise, use 'value'.

------------------------------------------------------------
Examples:
------------------------------------------------------------

Example 1:
-----------
let username = null;
let displayName = username ?? "Guest";
console.log(displayName); 
// Output: "Guest"

Example 2:
-----------
let username = "Sharad";
let displayName = username ?? "Guest";
console.log(displayName); 
// Output: "Sharad"

------------------------------------------------------------
Difference Between ?? and ||
------------------------------------------------------------
|| (Logical OR) checks for ALL falsy values 
(0, "", false, null, undefined)
?? checks ONLY for null or undefined

Example:
-----------
let count = 0;

console.log(count || 10); // Output: 10 (because 0 is falsy)
console.log(count ?? 10); // Output: 0 (because 0 is not null or undefined)

------------------------------------------------------------
Real-world Example:
------------------------------------------------------------
let user = {
  name: "Sharad",
  age: null
};

console.log(user.name ?? "Anonymous"); // Sharad
console.log(user.age ?? 18);           // 18
console.log(user.country ?? "India");  // India

------------------------------------------------------------
Exercise:
------------------------------------------------------------
Predict the output:
console.log("" ?? "empty");
console.log("" || "empty");
console.log(false ?? "no value");
console.log(false || "no value");
console.log(undefined ?? "missing");

------------------------------------------------------------
Summary:
------------------------------------------------------------
Operator: ??
Meaning: Checks only for null or undefined
Purpose: Provide a fallback value when something is missing
Use Instead of: || when you donâ€™t want to treat 0, false, or "" as missing
------------------------------------------------------------


####################################################################################
###############################    Function   ######################################
####################################################################################

Function is a block of code which perform specific task or action;
We can call any number of times and it will perform task.

There is inbuilt methods like -
alert(message), prompt(message, default ) and confirm(question).But we can create functions of our own as well.

Syntax : -
        function name(parameter1, parameter2, ...parameterN) {
          // body
        }

NOTE - parameters are optional in function

Example of function
  function showMessage() {
      alert('Hello everyone!');
  }

=> function can be called by its name: showMessage().

  function showMessage() {
    alert( 'Hello everyone!' );
  }

showMessage();
showMessage();

-------------------------------------------------------------------------------------
------------------------------   Local variables    ---------------------------------
-------------------------------------------------------------------------------------
A variable declared inside a function is only visible inside that function.

function showMessage() {
  let message = "Hello, I'm JavaScript!"; // local variable
  alert( message );
}

showMessage(); // Hello, I'm JavaScript!

alert( message ); // <-- Error! The variable is local to the function



-------------------------------------------------------------------------------------
------------------------------   Outer variables    ---------------------------------
-------------------------------------------------------------------------------------

A function can access an outer variable as well, for example:

let userName = 'John';

function showMessage() {
  let message = 'Hello, ' + userName;
  alert(message);
}

showMessage(); // Hello, John

IMP -> 
The function has full access to the outer variable. It can modify it as well.

let userName = 'John';

function showMessage() {
  userName = "Bob"; // (1) changed the outer variable

  let message = 'Hello, ' + userName;
  alert(message);
}

alert( userName ); // John before the function call

showMessage();

alert( userName ); // Bob, the value was modified by the function


NOTE: - The outer variable is only used if thereâ€™s no local one.

#############################     Parameters : -
----------------------------------------------------------------------------------
We can pass arbitrary data to functions using parameters.

In the example below, the function has two parameters: from and text.

function showMessage(from, text) { // parameters: from, text
  alert(from + ': ' + text);
}

showMessage('Ann', 'Hello!'); // Ann: Hello! (*)
showMessage('Ann', "What's up?"); // Ann: What's up? (**)



####################### Default parameters in old JavaScript code

  function showMessage(from, text) {
    if (text === undefined) {
      text = 'no text given';
  }
    alert( from + ": " + text );
  }

  
  // â€¦Or using the || operator:
  function showMessage(from, text) {
    // If the value of text is falsy, assign the default value
    // this assumes that text == "" is the same as no text at all
    text = text || 'no text given';
}



  // Returning a value
  // A function can return a value back into the calling code as the result.
  function sum(a, b) {
    return a + b;
  }

  let result = sum(1, 2);
  alert( result ); // 3




  